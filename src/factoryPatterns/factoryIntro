工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。

首先创建一个公用接口 ： 参考ICar

使用类去实现公用接口 : 参考Audi & Benz

创建工厂类创建实例 : 参考CarFactory
传统的工厂实现每增加一种类型就需要多增加一个类并且改造工厂类违反了（开闭原则），这是它的缺点，在此问题上对工厂改造
改造后的工厂类参考CarFactory2，根据实体类的class类型来生成实例，这样就可以不用改造工厂类了

通过CarFactory创建实例 ： 参考FactoryDemo

开闭原则：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。


工厂模式的运用：在spring ioc中其实就使用了工厂模式，ioc通过DI（依赖注入）的方式将bean的创建交给了spring容器,
spring容器自动帮我们创建对象，我们只需使用即可。

为什么要使用工厂模式：
1.我们经常有一些功能类似的类，所以我们的思路是进行抽象，使用接口暴露公共的方法，使用抽象类来提供公共的实现。
2.这些功能类似的类的实例化成为了一个问题，每个类的构造方法参数还不一样，每次 new 对象很麻烦，封装成简单工厂模式。
3.简单工厂模式不利于拓展，违背了开闭原则，每次添加一个类，都要修改工厂类,所以就有工厂方法模式,其原理就是对简单工厂也进行抽象。
4.抽象工厂模式。简单来说，可以把有一些有联系或者相近的产品，放到一个工厂去生产，没有必要单独再开一个工厂了。

我们都知道 Java 的泛型是采用类型擦除来实现的（在 javac 编译过程的中把泛型去掉，加上强制类型转换）。
所以我们不能直接 new T()来实例化一个对象。其实可以采用工厂方法模式设计模式来解决。

应用示例：
1.如果要连接两个不同数据库，那么可以在工厂类中获取mysql或者oracle连接
2.发送短信或邮件，实现同一个send()方法

使用工厂模式的好处：
有些类的功能本质上都相同，那么对于这部分想同类就没必要每一个都去new，可以通过工厂类来获取，这样做可以解耦，
不会让项目整体有太多的互相依赖性

